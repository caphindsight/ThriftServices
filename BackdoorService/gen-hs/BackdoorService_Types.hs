{-# LANGUAGE DeriveDataTypeable #-}
{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-missing-fields #-}
{-# OPTIONS_GHC -fno-warn-missing-signatures #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-----------------------------------------------------------------
-- Autogenerated by Thrift Compiler (0.9.3)                      --
--                                                             --
-- DO NOT EDIT UNLESS YOU ARE SURE YOU KNOW WHAT YOU ARE DOING --
-----------------------------------------------------------------

module BackdoorService_Types where
import Prelude (($), (.), (>>=), (==), (++))
import qualified Prelude as P
import qualified Control.Exception as X
import qualified Control.Monad as M ( liftM, ap, when )
import Data.Functor ( (<$>) )
import qualified Data.ByteString.Lazy as LBS
import qualified Data.Hashable as H
import qualified Data.Int as I
import qualified Data.Maybe as M (catMaybes)
import qualified Data.Text.Lazy.Encoding as E ( decodeUtf8, encodeUtf8 )
import qualified Data.Text.Lazy as LT
import qualified GHC.Generics as G (Generic)
import qualified Data.Typeable as TY ( Typeable )
import qualified Data.HashMap.Strict as Map
import qualified Data.HashSet as Set
import qualified Data.Vector as Vector
import qualified Test.QuickCheck.Arbitrary as QC ( Arbitrary(..) )
import qualified Test.QuickCheck as QC ( elements )

import qualified Thrift as T
import qualified Thrift.Types as T
import qualified Thrift.Arbitraries as T


data ExecResponse = ExecResponse  { execResponse_ExitCode :: I.Int32
  , execResponse_StdOut :: P.Maybe LT.Text
  , execResponse_StdErr :: P.Maybe LT.Text
  } deriving (P.Show,P.Eq,G.Generic,TY.Typeable)
instance H.Hashable ExecResponse where
  hashWithSalt salt record = salt   `H.hashWithSalt` execResponse_ExitCode record   `H.hashWithSalt` execResponse_StdOut record   `H.hashWithSalt` execResponse_StdErr record  
instance QC.Arbitrary ExecResponse where 
  arbitrary = M.liftM ExecResponse (QC.arbitrary)
          `M.ap`(M.liftM P.Just QC.arbitrary)
          `M.ap`(M.liftM P.Just QC.arbitrary)
  shrink obj | obj == default_ExecResponse = []
             | P.otherwise = M.catMaybes
    [ if obj == default_ExecResponse{execResponse_ExitCode = execResponse_ExitCode obj} then P.Nothing else P.Just $ default_ExecResponse{execResponse_ExitCode = execResponse_ExitCode obj}
    , if obj == default_ExecResponse{execResponse_StdOut = execResponse_StdOut obj} then P.Nothing else P.Just $ default_ExecResponse{execResponse_StdOut = execResponse_StdOut obj}
    , if obj == default_ExecResponse{execResponse_StdErr = execResponse_StdErr obj} then P.Nothing else P.Just $ default_ExecResponse{execResponse_StdErr = execResponse_StdErr obj}
    ]
from_ExecResponse :: ExecResponse -> T.ThriftVal
from_ExecResponse record = T.TStruct $ Map.fromList $ M.catMaybes
  [ (\_v2 -> P.Just (1, ("ExitCode",T.TI32 _v2))) $ execResponse_ExitCode record
  , (\_v2 -> (2, ("StdOut",T.TString $ E.encodeUtf8 _v2))) <$> execResponse_StdOut record
  , (\_v2 -> (3, ("StdErr",T.TString $ E.encodeUtf8 _v2))) <$> execResponse_StdErr record
  ]
write_ExecResponse :: (T.Protocol p, T.Transport t) => p t -> ExecResponse -> P.IO ()
write_ExecResponse oprot record = T.writeVal oprot $ from_ExecResponse record
encode_ExecResponse :: (T.Protocol p, T.Transport t) => p t -> ExecResponse -> LBS.ByteString
encode_ExecResponse oprot record = T.serializeVal oprot $ from_ExecResponse record
to_ExecResponse :: T.ThriftVal -> ExecResponse
to_ExecResponse (T.TStruct fields) = ExecResponse{
  execResponse_ExitCode = P.maybe (P.error "Missing required field: ExitCode") (\(_,_val4) -> (case _val4 of {T.TI32 _val5 -> _val5; _ -> P.error "wrong type"})) (Map.lookup (1) fields),
  execResponse_StdOut = P.maybe (P.Nothing) (\(_,_val4) -> P.Just (case _val4 of {T.TString _val6 -> E.decodeUtf8 _val6; _ -> P.error "wrong type"})) (Map.lookup (2) fields),
  execResponse_StdErr = P.maybe (P.Nothing) (\(_,_val4) -> P.Just (case _val4 of {T.TString _val7 -> E.decodeUtf8 _val7; _ -> P.error "wrong type"})) (Map.lookup (3) fields)
  }
to_ExecResponse _ = P.error "not a struct"
read_ExecResponse :: (T.Transport t, T.Protocol p) => p t -> P.IO ExecResponse
read_ExecResponse iprot = to_ExecResponse <$> T.readVal iprot (T.T_STRUCT typemap_ExecResponse)
decode_ExecResponse :: (T.Protocol p, T.Transport t) => p t -> LBS.ByteString -> ExecResponse
decode_ExecResponse iprot bs = to_ExecResponse $ T.deserializeVal iprot (T.T_STRUCT typemap_ExecResponse) bs
typemap_ExecResponse :: T.TypeMap
typemap_ExecResponse = Map.fromList [(1,("ExitCode",T.T_I32)),(2,("StdOut",T.T_STRING)),(3,("StdErr",T.T_STRING))]
default_ExecResponse :: ExecResponse
default_ExecResponse = ExecResponse{
  execResponse_ExitCode = 0,
  execResponse_StdOut = P.Nothing,
  execResponse_StdErr = P.Nothing}
