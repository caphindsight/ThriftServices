/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace BackdoorService
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class ExecResponse : TBase
  {
    private string _StdOut;
    private string _StdErr;

    public int ExitCode { get; set; }

    public string StdOut
    {
      get
      {
        return _StdOut;
      }
      set
      {
        __isset.StdOut = true;
        this._StdOut = value;
      }
    }

    public string StdErr
    {
      get
      {
        return _StdErr;
      }
      set
      {
        __isset.StdErr = true;
        this._StdErr = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool StdOut;
      public bool StdErr;
    }

    public ExecResponse() {
    }

    public ExecResponse(int ExitCode) : this() {
      this.ExitCode = ExitCode;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_ExitCode = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                ExitCode = iprot.ReadI32();
                isset_ExitCode = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                StdOut = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                StdErr = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_ExitCode)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("ExecResponse");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        field.Name = "ExitCode";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(ExitCode);
        oprot.WriteFieldEnd();
        if (StdOut != null && __isset.StdOut) {
          field.Name = "StdOut";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(StdOut);
          oprot.WriteFieldEnd();
        }
        if (StdErr != null && __isset.StdErr) {
          field.Name = "StdErr";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(StdErr);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("ExecResponse(");
      __sb.Append(", ExitCode: ");
      __sb.Append(ExitCode);
      if (StdOut != null && __isset.StdOut) {
        __sb.Append(", StdOut: ");
        __sb.Append(StdOut);
      }
      if (StdErr != null && __isset.StdErr) {
        __sb.Append(", StdErr: ");
        __sb.Append(StdErr);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
